plugins {
	id 'java-library'
	id 'eclipse'
	id 'antlr'
	id 'org.inferred.processors' version '3.3.0'
}

ext {
	javacppVersion = '1.5.5'
	cudaVersion = '11.2-8.1'
}

version "$cudaVersion-$javacppVersion"

repositories {
    maven { url 'https://repo.gradle.org/gradle/libs-releases' }
    mavenCentral()
}

sourceSets {
	javacpp {
		compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
		java {
			srcDirs = ["${buildDir}/javacpp/java"]
		}
		resources {
			srcDirs = ["${buildDir}/javacpp/resources"]
		}
	}
}

configurations {
    javacppImplementation.extendsFrom implementation
    javacppRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
	antlr 'org.antlr:antlr4:4.7.2'

	processor 'org.inferred:freebuilder:2.7.0'
	implementation platform("org.springframework.boot:spring-boot-dependencies:2.5.0")

	implementation "org.slf4j:slf4j-simple"
	implementation "org.bytedeco:javacpp-platform:$javacppVersion"
	implementation "org.bytedeco:cuda-platform:$cudaVersion-$javacppVersion"

	testImplementation 'org.junit.jupiter:junit-jupiter'
	testImplementation 'org.assertj:assertj-core'
	testImplementation 'org.mockito:mockito-core'
}

generateGrammarSource {
	outputDirectory = file("build/generated-src/antlr/main/org/immersed/gaffe")
    arguments += ["-package", "org.immersed.gaffe"]
}


task javacppGenerate(type: JavaExec) {
	// Executable jars can have only _one_ jar on the classpath.
	classpath = files(configurations.runtimeClasspath.asPath)
	mainClass = 'org.bytedeco.javacpp.tools.Builder'
	workingDir = sourceSets.main.java.outputDir
	
	// port 5005; can debug using eclipse Remote Java Application
	debug = false
	
	def arch = "windows-x86_64"
	
	doFirst {
		// arguments to pass to the application
		args "org/bytedeco/cuda/presets/cub"
		args "-properties", "${arch}-cuda"
		args "-d", "${buildDir}/javacpp/java"
	}
}

compileJavacppJava.dependsOn javacppGenerate

task jniJavacpp(type: JavaExec) {
	// Executable jars can have only _one_ jar on the classpath.
	classpath = files(sourceSets.javacpp.compileClasspath)
	mainClass = 'org.bytedeco.javacpp.tools.Builder'
	workingDir = sourceSets.javacpp.java.outputDir
	
	// port 5005; can debug using eclipse Remote Java Application
	debug = false
	
	def arch = "windows-x86_64"
	
	doFirst {
		// arguments to pass to the application
		// args "thrust/Thrust"
		
		args "org/bytedeco/cuda/global/cub"
		args "org/bytedeco/cuda/cub/DeviceHistogram"
		args "org/bytedeco/cuda/cub/DeviceScan"
		args "org/bytedeco/cuda/cub/DevicePartition"
		
		args "-properties", "${arch}-cuda"
		args "-nodelete"
		args "-Xcompiler", "--gpu-architecture=sm_61"
		// issue with /GL and Thurst: https://github.com/bytedeco/javacpp/issues/485
		args "-Xcompiler", "-Xcompiler=-GL-"
		args "-d", "${buildDir}/javacpp/resources/${arch}"
	}
}

compileJavacppJava.finalizedBy jniJavacpp

task generateAll(dependsOn: [generateGrammarSource, compileJavacppJava])

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}
